// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monolith.Domain.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Monolith.Domain.Migrations
{
    [DbContext(typeof(PrimarydbContext))]
    [Migration("20200105222639_AddedJoinTable_AppUserCourse")]
    partial class AddedJoinTable_AppUserCourse
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Monolith.Domain.BusinessObjects.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userid");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .HasColumnName("firstname")
                        .HasMaxLength(255);

                    b.Property<int?>("InstructorRating")
                        .HasColumnName("instructorrating");

                    b.Property<bool>("IsApproved")
                        .HasColumnName("isapproved");

                    b.Property<string>("LastName")
                        .HasColumnName("lastname")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasMaxLength(255);

                    b.Property<string>("Salt")
                        .HasColumnName("salt")
                        .HasMaxLength(128);

                    b.HasKey("UserId")
                        .HasName("appuser_pkey");

                    b.ToTable("appuser");
                });

            modelBuilder.Entity("Monolith.Domain.BusinessObjects.AppUserCourse", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("CourseId");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("AppUserCourse");
                });

            modelBuilder.Entity("Monolith.Domain.BusinessObjects.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("courseid");

                    b.Property<string>("CourseDescription")
                        .HasColumnName("coursedescription");

                    b.Property<string>("CourseName")
                        .HasColumnName("coursename")
                        .HasMaxLength(255);

                    b.Property<int?>("InstructorId")
                        .HasColumnName("instructorid");

                    b.Property<int?>("Rating")
                        .HasColumnName("rating");

                    b.HasKey("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("course");
                });

            modelBuilder.Entity("Monolith.Domain.BusinessObjects.Lecture", b =>
                {
                    b.Property<int>("LectureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lectureid");

                    b.Property<string>("LectureName")
                        .HasColumnName("lecturename")
                        .HasMaxLength(255);

                    b.Property<int>("TopicId")
                        .HasColumnName("topicid");

                    b.HasKey("LectureId");

                    b.HasIndex("TopicId");

                    b.ToTable("lecture");
                });

            modelBuilder.Entity("Monolith.Domain.BusinessObjects.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("topicid");

                    b.Property<int>("CourseId")
                        .HasColumnName("courseid");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon");

                    b.Property<string>("TopicDescription")
                        .HasColumnName("topicdescription")
                        .HasMaxLength(500);

                    b.Property<string>("TopicName")
                        .HasColumnName("topicname")
                        .HasMaxLength(255);

                    b.Property<int>("TopicOrder")
                        .HasColumnName("topicorder");

                    b.HasKey("TopicId");

                    b.HasIndex("CourseId");

                    b.ToTable("topic");
                });

            modelBuilder.Entity("Monolith.Domain.BusinessObjects.AppUserCourse", b =>
                {
                    b.HasOne("Monolith.Domain.BusinessObjects.Course", "Course")
                        .WithMany("AppUsers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Monolith.Domain.BusinessObjects.AppUser", "AppUser")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Monolith.Domain.BusinessObjects.Course", b =>
                {
                    b.HasOne("Monolith.Domain.BusinessObjects.AppUser", "Instructor")
                        .WithMany("Course")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("course_instructorid_fkey");
                });

            modelBuilder.Entity("Monolith.Domain.BusinessObjects.Lecture", b =>
                {
                    b.HasOne("Monolith.Domain.BusinessObjects.Topic", "Topic")
                        .WithMany("Lecture")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("lecture_topicid_fkey");
                });

            modelBuilder.Entity("Monolith.Domain.BusinessObjects.Topic", b =>
                {
                    b.HasOne("Monolith.Domain.BusinessObjects.Course", "Course")
                        .WithMany("Topic")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("topic_courseid_fkey");
                });
#pragma warning restore 612, 618
        }
    }
}
